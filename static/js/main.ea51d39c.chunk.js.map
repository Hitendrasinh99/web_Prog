{"version":3,"sources":["Playlist.js","App.js","reportWebVitals.js","index.js"],"names":["Playlist","items","setItems","useState","status","setStatus","currentIndex","setCurrentIndex","useEffect","fetch","then","response","json","data","songs","Array","isArray","Error","catch","error","console","React","createElement","className","onClick","handlePrev","length","prevIndex","title","episodeTitle","handlePlayPause","startsWith","handleNext","nextIndex","map","item","index","key","onDoubleClick","handleDoubleClick","handleShuffle","shuffled","sort","Math","random","App","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4MA0FeA,MAvFEA,KACf,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAQC,GAAaF,mBAAS,oBAC9BG,EAAcC,GAAmBJ,mBAAS,MAEjDK,oBAAU,KACRC,MAAM,eACHC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACL,IAAIA,EAAKC,QAASC,MAAMC,QAAQH,EAAKC,OAGnC,MAAM,IAAIG,MAAM,0BAFhBf,EAASW,EAAKC,SAKjBI,MAAOC,GAAUC,QAAQD,MAAM,sBAAuBA,KACxD,IAyCH,OACEE,IAAAC,cAAA,OAAKC,UAAU,sBAEbF,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,MAAIC,UAAU,kBAAiB,yBAC/BF,IAAAC,cAAA,OAAKC,UAAU,cAAcnB,GAG7BiB,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAQE,QAjCGC,KACjB,GAAqB,IAAjBxB,EAAMyB,OAAc,OACxB,MAAMC,EAA6B,OAAjBrB,GAA0C,IAAjBA,EAAqBL,EAAMyB,OAAS,EAAIpB,EAAe,EAClGC,EAAgBoB,GAChBtB,EAAU,aAAYJ,EAAM0B,GAAWC,OAAS3B,EAAM0B,GAAWE,iBA6B9B,UAC7BR,IAAAC,cAAA,UAAQE,QA1BQM,KAClB1B,EAAO2B,WAAW,WACpB1B,EAAU,UACgB,OAAjBC,GACTD,EAAU,aAAYJ,EAAMK,GAAcsB,OAAS3B,EAAMK,GAAcuB,iBAsBjC,uBAClCR,IAAAC,cAAA,UAAQE,QA3CGQ,KACjB,GAAqB,IAAjB/B,EAAMyB,OAAc,OACxB,MAAMO,EAA6B,OAAjB3B,GAAyBA,IAAiBL,EAAMyB,OAAS,EAAI,EAAIpB,EAAe,EAClGC,EAAgB0B,GAChB5B,EAAU,aAAYJ,EAAMgC,GAAWL,OAAS3B,EAAMgC,GAAWJ,iBAuC9B,YAKjCR,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,MAAIC,UAAU,iBACXtB,EAAMiC,IAAI,CAACC,EAAMC,IAChBf,IAAAC,cAAA,MAAIe,IAAKD,EAAOb,UAAU,gBAAgBe,cAAeA,IAzDxCF,KACzB7B,EAAgB6B,GAChB/B,EAAU,aAAYJ,EAAMmC,GAAOR,OAAS3B,EAAMmC,GAAOP,gBAuDcU,CAAkBH,IAC9ED,EAAKP,OAASO,EAAKN,gBAI1BR,IAAAC,cAAA,UAAQC,UAAU,cAAcC,QA/BhBgB,KACpB,MAAMC,EAAW,IAAIxC,GAAOyC,KAAK,IAAMC,KAAKC,SAAW,IACvD1C,EAASuC,GACTlC,EAAgB,MAChBF,EAAU,qBA2BkD,2BCxEjDwC,MATf,WACE,OACExB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAACtB,EAAQ,QCKA8C,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,KAAKuC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,IAAAC,cAACD,IAAMuC,WAAU,KACfvC,IAAAC,cAACuB,EAAG,QAORC,K","file":"static/js/main.ea51d39c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Playlist.css\";\n\nconst Playlist = () => {\n  const [items, setItems] = useState([]);\n  const [status, setStatus] = useState(\"No Song Playing\");\n  const [currentIndex, setCurrentIndex] = useState(null);\n\n  useEffect(() => {\n    fetch(\"/songs.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.songs && Array.isArray(data.songs)) {\n          setItems(data.songs);\n        } else {\n          throw new Error(\"Invalid JSON structure\");\n        }\n      })\n      .catch((error) => console.error(\"Error loading data:\", error));\n  }, []);\n\n  // Handle Double-Click to Play\n  const handleDoubleClick = (index) => {\n    setCurrentIndex(index);\n    setStatus(`Playing: ${items[index].title || items[index].episodeTitle}`);\n  };\n\n  // Handle Next Button\n  const handleNext = () => {\n    if (items.length === 0) return;\n    const nextIndex = currentIndex === null || currentIndex === items.length - 1 ? 0 : currentIndex + 1;\n    setCurrentIndex(nextIndex);\n    setStatus(`Playing: ${items[nextIndex].title || items[nextIndex].episodeTitle}`);\n  };\n\n  // Handle Prev Button\n  const handlePrev = () => {\n    if (items.length === 0) return;\n    const prevIndex = currentIndex === null || currentIndex === 0 ? items.length - 1 : currentIndex - 1;\n    setCurrentIndex(prevIndex);\n    setStatus(`Playing: ${items[prevIndex].title || items[prevIndex].episodeTitle}`);\n  };\n\n  // Handle Play/Pause Button\n  const handlePlayPause = () => {\n    if (status.startsWith(\"Playing\")) {\n      setStatus(\"Paused\");\n    } else if (currentIndex !== null) {\n      setStatus(`Playing: ${items[currentIndex].title || items[currentIndex].episodeTitle}`);\n    }\n  };\n\n  // Handle Shuffle Button\n  const handleShuffle = () => {\n    const shuffled = [...items].sort(() => Math.random() - 0.5);\n    setItems(shuffled);\n    setCurrentIndex(null);\n    setStatus(\"No Song Playing\");\n  };\n\n  return (\n    <div className=\"playlist-container\">\n      {/* Left Section */}\n      <div className=\"left-section\">\n        <h2 className=\"playlist-title\">Hitendrasinh Playlist</h2>\n        <div className=\"status-box\">{status}</div>\n\n        {/* Controls */}\n        <div className=\"controls\">\n          <button onClick={handlePrev}>‚èÆ</button>\n          <button onClick={handlePlayPause}>‚ñ∂Ô∏è/‚è∏</button>\n          <button onClick={handleNext}>‚è≠</button>\n        </div>\n      </div>\n\n      {/* Right Section */}\n      <div className=\"right-section\">\n        <ul className=\"playlist-list\">\n          {items.map((item, index) => (\n            <li key={index} className=\"playlist-item\" onDoubleClick={() => handleDoubleClick(index)}>\n              {item.title || item.episodeTitle}\n            </li>\n          ))}\n        </ul>\n        <button className=\"shuffle-btn\" onClick={handleShuffle}>üîÄ Shuffle</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Playlist;\n","import React from \"react\";\nimport Playlist from \"./Playlist\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>My Music Playlist</h1>\n      <Playlist />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}